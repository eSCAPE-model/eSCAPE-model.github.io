<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Home on eSCAPE</title>
    <link>https://escape-model.github.io/</link>
    <description>Recent content in Home on eSCAPE</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>Tristan Salles - School of Geosciences - The University of Sydney</copyright>
    <lastBuildDate>Fri, 14 Sep 2018 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://escape-model.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Hands-on tutorials</title>
      <link>https://escape-model.github.io/2018/09/hands-on-tutorials/</link>
      <pubDate>Fri, 14 Sep 2018 00:00:00 +0000</pubDate>
      
      <guid>https://escape-model.github.io/2018/09/hands-on-tutorials/</guid>
      <description>To get some additional info in regards to how to use eSCAPE a series of examples and tutorials is provided in the docker container (Geodels escape-docker) and is also available for download from the eSCAPE-demo repository.
Usage Either via jupyter notebooks or python files.
python run_eSCAPE.py -i input.yml -v  where the run_eSCAPE.py script takes one required argument the input filename and an optional verbose command (-v). To run the script in parallel simply use the mpirun command.</description>
    </item>
    
    <item>
      <title>Input files</title>
      <link>https://escape-model.github.io/2018/09/input-files/</link>
      <pubDate>Fri, 14 Sep 2018 00:00:00 +0000</pubDate>
      
      <guid>https://escape-model.github.io/2018/09/input-files/</guid>
      <description>Input files for eSCAPE are based on YAML syntax.
A typical file will look like this:
name: Description of the what is going to be done in this simulation... domain: filename: [&#39;data/inputfileparameters.vtk&#39;,&#39;Z&#39;] flowdir: 5 bc: &#39;slope&#39; time: start: 0. end: 1000000. tout: 1000. dt: 100. sea: position: 0. curve: &#39;data/sealevel.csv&#39; climate: - start: 0. uniform: 1.0 - start: 500000. map: [&#39;data/inputfileparameters.vtk&#39;,&#39;R&#39;] - start: 500000. uniform: 2.0 tectonic: - start: 0. map: [&#39;data/inputfileparameters.</description>
    </item>
    
    <item>
      <title>Installation</title>
      <link>https://escape-model.github.io/2018/09/installation/</link>
      <pubDate>Fri, 14 Sep 2018 00:00:00 +0000</pubDate>
      
      <guid>https://escape-model.github.io/2018/09/installation/</guid>
      <description>Getting started For installation information and documentation visit our Github wiki page which provides a quick guide on the installation dependencies.
A set of examples are available in the eSCAPE-demo repository.
The easiest way to get started is with the Docker container https://hub.docker.com/u/geodels/ using Kitematic. Once Kitematic is installed on your computer, open it and look for Geodels escape-docker via the search menu.
If you want to install it yourself, you can follow the steps provided in the wiki page.</description>
    </item>
    
    <item>
      <title>About...</title>
      <link>https://escape-model.github.io/about/</link>
      <pubDate>Fri, 14 Sep 2018 00:00:00 +0000</pubDate>
      
      <guid>https://escape-model.github.io/about/</guid>
      <description>eSCAPE is a parallel TIN-based landscape evolution model, built to simulate topography dynamic at various space and time scales. The model accounts for hillslope processes (soil creep using linear diffusion), fluvial incision (stream power law), spatially and temporally varying tectonics (vertical displacements) and climatic forces (temporal and spatial precipitation changes and/or sea-level fluctuations).
The specs The model is based on the following approaches:
 an adaptation of the implicit, parallelizable method for calculating drainage area for both single (D8) and multiple flow direction (Dinf) from Richardson &amp;amp; Perron (2014), the extension of the parallel priority-flood algorithm from Barnes (2016) to unstructured mesh, the methods developed in pyBadlands (Salles et al.</description>
    </item>
    
  </channel>
</rss>